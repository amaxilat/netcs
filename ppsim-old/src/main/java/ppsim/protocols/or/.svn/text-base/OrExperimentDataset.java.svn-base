/**
 * Computer Engineering and Informatics Department, University of Patras
 *
 * Project:     Undergraduate diploma thesis
 * Created at:  27 Σεπ 2011 10:04:09 μμ
 * Author:      Theofanis Raptis
 *
 */

package ppsim.protocols.or;

import org.apache.log4j.Logger;
import ppsim.model.AbstractExperiment;
import ppsim.model.Scheduler;
import ppsim.schedulers.SchedulerFactory;

/**
 * Implementation of an experiment of the OR protocol given a dataset.
 */
public class OrExperimentDataset extends AbstractExperiment<Boolean, OrProtocol> {

    /**
     * Population percentage that should be affected by OR operator before the
     * experiment is completed.
     */
    private final double populationLimit;

    /**
     * Default constructor.
     *
     * @param scheduler the Scheduler that will be used in the experiment.
     * @param size      the number of agents.
     * @param limit     the percentage of population that must stabilize.
     */
    public OrExperimentDataset(final Scheduler<Boolean> scheduler, final int size, final double limit) {
        super(size, new OrProtocol(), scheduler);
        populationLimit = limit;
        LOGGER.debug("OrExperimentA(" + getSchedulerName() + ")<" + size + "> initialized");
    }

    /**
     * Initialize the population.
     */
    protected void initPopulation() {
        for (int i = 0; i < getPopulationSize(); i++) {
            new OrAgent(getPopulation()); //NOPMD
        }

        // Set only 1 agent with True state
        getPopulation().getAgent(getPopulationSize() - 1).setState(true);
    }

    /**
     * Evaluates if the population protocol has reached a stable state.
     *
     * @return true if the protocol has reached a stable state.
     */
    protected boolean checkStability() {
        final long target = (long) (getPopulationSize() * populationLimit);
        return getPopulation().getStateCount(true) >= target;
    }

    /**
     * Finalizes the execution of the experiment.
     */
    protected void completeExperiment() {
        LOGGER.warn("OrExperimentA(" + getSchedulerName() + ")<" + getPopulationSize() + "," + populationLimit
                + "> completed at round " + getRound());
    }

    /**
     * Main function.
     *
     * @param args command line arguments
     */
    public static void main(final String[] args) {
        final Logger logger = Logger.getLogger("ppsim.protocols.or");

        long[][] stats = new long[(int) java.lang.Math.log10(DATASET_SIZE) + 1][SchedulerFactory.TOTAL];
        final SchedulerFactory<Boolean> sfactory = new SchedulerFactory<Boolean>();

            final int size = DATASET_SIZE;          
            final int sched = SchedulerFactory.RANDOM_EDGE_FROM_DATASET;
            try {
                // Instantiate the new scheduler
                final Scheduler<Boolean> scheduler = sfactory.createScheduler(sched);

                // Construct new ppsim.model.AbstractExperiment
                final OrExperimentDataset exp = new OrExperimentDataset(scheduler, size, 1.0);

                // Start the experiment
                exp.run();
                
                // Keep track of rounds
                stats[(int) java.lang.Math.log10(size)][sched] += exp.getRound();
            } catch (Exception ex) {
                logger.error("Error occured", ex);
            }
            // Average out repetitions
            stats[(int) java.lang.Math.log10(size)][sched] /= EXPREPETITIONS;
            
            final StringBuffer strBuf = new StringBuffer(60);
            strBuf.append('\n');
            strBuf.append("prot");
            strBuf.append('\t');
            strBuf.append("size");
            strBuf.append('\t');
            strBuf.append("sched");
            strBuf.append('\t');
            strBuf.append("interactions");
            strBuf.append('\n');
            
            final int thisSize = DATASET_SIZE;
            strBuf.append("or");
            strBuf.append('\t');
            strBuf.append(thisSize);
            strBuf.append('\t');
            strBuf.append(sched);
            strBuf.append('\t');
            strBuf.append(stats[(int) java.lang.Math.log10(thisSize)][sched]);
            strBuf.append('\n');
            
            logger.info(strBuf.toString());
    }
}
